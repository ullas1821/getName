Obtain the Topological ordering of vertices in a given graph.

import java.util.*;

public class TopologicalSortDFS
 {
    
    // Function to perform DFS and find the topological order
    private static void dfs(int vertex, List<List<Integer>> adjList, boolean[] visited,            Stack<Integer> topoStack) 
{
        visited[vertex] = true;

         // Recur for all the vertices adjacent to this vertex
        for (int neighbor : adjList.get(vertex)) 
{
             if (!visited[neighbor])
           {
                dfs(neighbor, adjList, visited, topoStack);
            }
        }

        // Push current vertex to stack after all adjacent vertices are processed
        topoStack.push(vertex);
    }

    // Function to return the topological order of the graph
    public static List<Integer> topologicalSort(int numVertices, List<List<Integer>> adjList) {
        boolean[] visited = new boolean[numVertices];
        Stack<Integer> topoStack = new Stack<>();

        // Perform DFS for all vertices
        for (int i = 0; i < numVertices; i++)
     {
            if (!visited[i]) 
               {
                     dfs(i, adjList, visited, topoStack);
                }
        }

        // Convert the stack to a list for the final topological order
        List<Integer> topoOrder = new ArrayList<>();
        while (!topoStack.isEmpty()) 
      {
            topoOrder.add(topoStack.pop());
        }

        return topoOrder;
    }

    public static void main(String[] args) 
      {
        Scanner scanner = new Scanner(System.in);

        // Take number of vertices as input
        System.out.print("Enter number of vertices: ");
        int numVertices = scanner.nextInt();

        // Adjacency list representation of the graph
        List<List<Integer>> adjList = new ArrayList<>();
             for (int i = 0; i < numVertices; i++) 
                {
                        adjList.add(new ArrayList<>());
                 }

        // Take number of edges as input
        System.out.print("Enter number of edges: ");
        int numEdges = scanner.nextInt();

        // Take edges as input (u -> v)
        System.out.println("Enter the edges (u v): ");
        for (int i = 0; i < numEdges; i++) 
           {
                int u = scanner.nextInt();
                int v = scanner.nextInt();
                adjList.get(u).add(v);
        }

        // Get the topological order
        List<Integer> topoOrder = topologicalSort(numVertices, adjList);

        // Output the topological order
        System.out.println("Topological Sort: " + topoOrder);

        scanner.close();
    }
}

Output:
Enter number of vertices: 4
Enter number of edges: 4
Enter the edges (u v): 
0 1
1 2
0 2
 1 3
Topological Sort: [0, 1, 3, 2]
